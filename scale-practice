#! /usr/bin/python

import argparse
import random
import sys
import time

random.seed(time.time())

# class Walker(object):
#     def __init__(self, note_list):
#         self._notes = note_list
#         self._size = len(note_list)
#         self._direction = '/\\'
#         self._current_note = None

#     @getter
#     def note(self):
#         # return the current note

#     def __str__(self):
#         if self._up_down == 1:
#             return '/\\'
#         elif self._up_down == -1:
#             return '\\/'

#     def _step(self):
#         # move to next note
#         pass

# class RandomWalker(Walker):
#     def __init__(self, note_list):


strings = {
    'standard': ['E', 'A', 'D', 'G', 'B', 'e']
}

scales = {
    'Amp1': {
        'description': 'A Minor Pentatonic Scale (First Position)',
        'tuning': 'standard',
        'notes': {
            'E': [1,4],
            'A': [1,3],
            'D': [1,3],
            'G': [1,3],
            'B': [1,4],
            'e': [1,4],
        },
    },
    'Amp5': {
        'description': 'A Minor Pentatonic Scale (Fifth Position)',
        'tuning': 'standard',
        'notes': {
            'E': [5,8],
            'A': [5,7],
            'D': [5,7],
            'G': [5,7],
            'B': [5,8],
            'e': [5,8],
        },
    },
    'Emp': {
        'description': 'E Minor Pentatonic Scale',
        'tuning': 'standard',
        'notes': {
            'E': [0,3],
            'A': [0,2],
            'D': [0,2],
            'G': [0,2],
            'B': [0,3],
            'e': [0,3],
        },
    }
}

parser = argparse.ArgumentParser(
    description='Walk through notes in a particular scale')
parser.add_argument(
    '-s', '--scale', default='Amp1',
    help='the notes that should be played')
parser.add_argument(
    '-b', '--bpm', type=int, default=60,
    help='number of beats per minute')
parser.add_argument(
    '-m', '--movement', default='in_order',
    help='type of movement around in the notes')
parser.add_argument(
    '-t', '--time', type=int, default=1,
    help='length of the session (in minutes)'
)
args = parser.parse_args()

def build_scale(name):
    scale_list = []
    scale = scales[name]
    for s in strings[scale['tuning']]:
        for n in scale['notes'][s]:
            scale_list.append('{}{}'.format(s,n))
    return scale_list

def countdown(start_note):
    for i in range(5,0,-1):
        cr_write('{} in {}'.format(start_note, i))
        time.sleep(1)
    cr_write('           ')

def cr_write(msg):
    sys.stdout.write('\r{}'.format(msg))
    sys.stdout.flush()

def in_order(scale, delay, duration):
    duration = float(duration)
    direction = 1
    dir_str = '/\\'
    i = 1
    countdown(scale[0])
    cr_write('{} {}'.format(scale[0], dir_str))
    time.sleep(delay)
    while duration > 0:
        duration -= delay
        if i == 0 or (i == len(scale) - 1):
            direction *= -1
            dir_str = dir_str[1] + dir_str[0]
        cr_write('{} {}'.format(scale[i], dir_str))
        i += direction
        time.sleep(delay)

def random_walk(scale, delay, duration):
    duration = float(duration)
    direction = random.choice([1,-1])
    dir_str = '/\\' if direction == 1 else '\\/'
    i = random.randint(0, len(scale) - 1)
    countdown(scale[i])
    cr_write(scale[i])
    time.sleep(delay)
    while duration > 0:
        duration -= delay
        if (random.randint(0,3) == 1 or
                (i + direction < 0) or
                (i + direction == len(scale))):
            direction *= -1
            dir_str = dir_str[1] + dir_str[0]
        i += direction
        cr_write('{} {}'.format(scale[i], dir_str))
        time.sleep(delay)

def random_hop(scale_name, delay):
    pass

delay = int((60.0 / args.bpm) * 100) / 100.0

scale = build_scale(args.scale)

print 'Playing {} {} at {} bpm.\n\n'.format(args.scale, args.movement, args.bpm)
print scale
print

if args.movement == 'in_order':
    in_order(scale, delay, args.time * 60)
elif args.movement == 'random_walk':
    random_walk(scale, delay, args.time * 60)
else:
    print ('Dunno what {} is'.format(args.movement))

print('\n')
